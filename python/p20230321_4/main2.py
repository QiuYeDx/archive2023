# Q: 给定一个数据流A[1,...,n], 如何估算所有A[i]*A[i]的和，若另有一数据流B[1,...,n]，如何估算A[i]B[i]之和。
# A: 
# 对于第一个问题，可以使用随机化算法来估算所有A[i]*A[i]的和。具体方法如下：
# 随机选择一个小常数p，使得0 < p < 1。
# 初始化一个变量sum为0。
# 对于数据流中的每个元素A[i]，计算A[i]*A[i]并将其乘以p，然后将结果加入sum中。
# 最终得到的sum/p即为所有A[i]*A[i]的和的估计值。
# 这个算法的正确性基于期望值的线性性质，可以证明它的期望值与所有A[i]*A[i]的和的真实值非常接近。

# 对于第二个问题，可以采用与上述算法类似的方法。具体步骤如下：
# 随机选择一个小常数p，使得0 < p < 1。
# 初始化一个变量sum为0。
# 对于数据流中的每个元素A[i]和B[i]，计算A[i]*B[i]并将其乘以p，然后将结果加入sum中。
# 最终得到的sum/p即为所有A[i]B[i]的和的估计值。
# 这个算法的正确性也基于期望值的线性性质，可以证明它的期望值与所有A[i]B[i]的和的真实值非常接近。

# 估算所有A[i]*A[i]的和：
import random

def estimate_square_sum(A):
    p = 0.5 # 选择一个小常数p
    sum = 0
    for a in A:
        sum += a * a * p
    return sum / p

# 估算A[i]B[i]之和：
import random

def estimate_product_sum(A, B):
    p = 0.5 # 选择一个小常数p
    sum = 0
    for a, b in zip(A, B):
        sum += a * b * p
    return sum / p

# 这里使用了Python的zip函数，它可以同时迭代多个序列，对于每个序列取出一个元素进行操作。
